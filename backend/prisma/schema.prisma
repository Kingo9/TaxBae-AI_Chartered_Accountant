// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  password          String
  name              String
  phone             String?
  userType          UserType   @default(INDIVIDUAL)
  isEmailVerified   Boolean    @default(false)
  profilePicture    String?
  
  // Financial Profile
  annualIncome      Float?
  taxRegime         TaxRegime? @default(NEW_REGIME)
  panNumber         String?    @unique
  
  // Timestamps
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  lastLoginAt       DateTime?

  // Relations
  transactions      Transaction[]
  investments       Investment[]
  chatSessions      ChatSession[]
  notifications     Notification[]
  reminders         Reminder[]
  taxDocuments      TaxDocument[]
  financialGoals    FinancialGoal[]
  
  @@map("users")
}

model Transaction {
  id            String          @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Float
  category      String
  subCategory   String?
  description   String
  date          DateTime
  location      String?
  isRecurring   Boolean         @default(false)
  
  // Tax Related
  isTaxDeductible Boolean       @default(false)
  taxSection      String?       // 80C, 80D, etc.
  
  // Receipt/Proof
  receiptUrl      String?
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model Investment {
  id                String         @id @default(cuid())
  userId            String
  type              InvestmentType
  name              String
  amount            Float
  currentValue      Float?
  purchaseDate      DateTime
  maturityDate      DateTime?
  
  // Returns
  expectedReturn    Float?
  actualReturn      Float?
  
  // Tax Benefits
  taxSection        String?        // 80C, ELSS, etc.
  lockInPeriod      Int?           // months
  
  // Portfolio
  units             Float?
  nav               Float?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("investments")
}

model ChatSession {
  id          String        @id @default(cuid())
  userId      String
  title       String?
  isActive    Boolean       @default(true)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]
  
  @@map("chat_sessions")
}

model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String
  content     String
  role        MessageRole
  metadata    Json?       // For storing context, citations, etc.
  
  createdAt   DateTime    @default(now())
  
  // Relations
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

model Notification {
  id            String           @id @default(cuid())
  userId        String
  title         String
  body          String
  type          NotificationType
  data          Json?
  isRead        Boolean          @default(false)
  scheduledFor  DateTime?
  sentAt        DateTime?
  
  createdAt     DateTime         @default(now())
  
  // Relations
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model Reminder {
  id              String        @id @default(cuid())
  userId          String
  title           String
  description     String?
  type            ReminderType
  dueDate         DateTime
  isCompleted     Boolean       @default(false)
  isRecurring     Boolean       @default(false)
  recurringPeriod String?       // daily, weekly, monthly, yearly
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reminders")
}

model TaxDocument {
  id            String      @id @default(cuid())
  userId        String
  name          String
  type          String      // Form16, Investment Proof, etc.
  fileUrl       String
  taxYear       String
  uploadedAt    DateTime    @default(now())
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("tax_documents")
}

model FinancialGoal {
  id              String    @id @default(cuid())
  userId          String
  name            String
  description     String?
  targetAmount    Float
  currentAmount   Float     @default(0)
  targetDate      DateTime
  priority        Priority  @default(MEDIUM)
  category        String    // Retirement, House, Car, etc.
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("financial_goals")
}

model MarketData {
  id          String   @id @default(cuid())
  symbol      String   @unique
  name        String
  value       Float
  change      Float?
  changePercent Float?
  lastUpdated DateTime @default(now())
  
  @@map("market_data")
}

model TaxRate {
  id              String   @id @default(cuid())
  taxYear         String
  regime          TaxRegime
  incomeSlabFrom  Float
  incomeSlabTo    Float?
  taxRate         Float
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("tax_rates")
}

// Enums
enum UserType {
  INDIVIDUAL
  CORPORATE
  PROFESSIONAL
}

enum TaxRegime {
  OLD_REGIME
  NEW_REGIME
}

enum TransactionType {
  INCOME
  EXPENSE
  INVESTMENT
  TRANSFER
}

enum InvestmentType {
  MUTUAL_FUND
  STOCKS
  BONDS
  FD
  RD
  PPF
  EPF
  NSC
  ELSS
  REAL_ESTATE
  CRYPTO
  GOLD
  OTHER
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum NotificationType {
  TAX_DEADLINE
  INVESTMENT_REMINDER
  MARKET_UPDATE
  GENERAL
  SYSTEM
}

enum ReminderType {
  TAX_FILING
  INVESTMENT
  PAYMENT
  DOCUMENT_UPLOAD
  GENERAL
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
